name: CI (Build & Test)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    name: Backend (Maven)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: maven-

      - name: Build & run unit tests
        run: mvn -B -U -DskipTests=false verify

      - name: Package fat jar
        run: mvn -B -DskipTests=true package

      - name: Upload backend artifact (.jar)
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar

  frontend:
    name: Frontend (Node)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20 LTS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps (CI)
        run: npm ci

      - name: Run frontend tests (if present)
        run: npm test --if-present -- --watch=false

      - name: Build production bundle
        run: npm run build

      - name: Upload frontend build (dist/)
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  smoke-e2e:
    name: Backend Smoke Test (optional)
    runs-on: ubuntu-latest
    needs: [backend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download backend jar
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: ./build

      - name: Start backend
        run: |
          JAR=$(ls build/*.jar | head -n1)
          nohup java -jar "$JAR" > server.log 2>&1 &
          # wait for port 8080
          for i in {1..30}; do
            if curl -sf http://localhost:8080/tasks >/dev/null 2>&1; then
              echo "Server is up"; break
            fi
            sleep 2
          done

      - name: Hit /tasks endpoint
        run: |
          curl -sf http://localhost:8080/tasks | tee response.json
